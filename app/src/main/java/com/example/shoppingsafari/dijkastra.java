package com.example.shoppingsafari;


import java.util.*;

import java.lang.*;
import java.io.*;

public class dijkastra {
    // A utility function to find the vertex with minimum distance value,
    // from the set of vertices not yet included in shortest path tree
    double graph[][] = new double[][] { { 0.0, 1.0, 2.0, 3.0, 4.0, 1.0, 1.4, 2.2, 3.2, 4.1, 2.0, 2.2, 2.8, 3.6, 4.5, 3.0, 3.2, 3.6, 4.2, 5.0, 4.0, 4.1, 4.5, 5.0, 5.0},
            { 1.0, 0.0, 1.0, 2.0, 3.0, 1.4, 1.0, 1.4, 2.2, 3.2, 2.2, 2.0, 2.2, 2.8, 3.6, 3.2, 3.0, 3.2, 3.6, 4.2, 4.1, 4.0, 4.1, 4.5, 5.0},
            { 2.0, 1.0, 0.0, 1.0, 2.0, 2.2, 1.4, 1.0, 1.4, 2.2, 2.8, 2.2, 2.0, 2.2, 2.8, 3.6, 3.2, 3.0, 3.2, 3.6, 4.5, 4.1, 4.0, 4.1, 4.5},
            { 3.0, 2.0, 1.0, 0.0, 1.0, 3.2, 2.2, 1.4, 1.0, 1,4, 3.6, 2.8, 2.2, 2.0, 2.2, 4.2, 3.6, 3.2, 3.0, 3.2, 5.0, 4.5, 4.1, 4.0, 4.1},
            { 4.0, 3.0, 2.0, 1.0, 0.0, 4.1, 3.2, 2.2, 1.4, 1.0, 4.5, 3.6, 2.8, 2.2, 2.0, 5.0, 4.2, 3.6, 3.2, 3.0, 5.7, 5.0, 4.5, 4.1, 4.0},
            { 1.0, 1.4, 2.2, 3.2, 4.1, 0.0, 1.0, 2.0, 3.0, 4.0, 1.0, 1.4, 2.2, 3.2, 4.1, 2.0, 2.2, 2.8, 3.6, 4.5, 3.0, 3.2, 3.6, 4.2, 5.0},
            {1.4, 1.0, 1.4, 2.2, 3.2, 1.0, 0.0, 1.0, 2.0, 3.0, 1.4, 1.0, 1.4, 2.2, 3.2, 2.2, 2.0, 2.2, 2.8, 3.6, 3.2, 3.0, 3.2, 3.6, 4.2},
            {2.2, 1.4, 1.0, 1.4, 2.2, 2.0, 1.0, 0.0, 1.0, 2.0, 2.2, 1.4, 1.0, 1.4, 2.2, 2.8, 2.2, 2.0, 2.2, 2.8, 3.6, 3.2, 3.0, 3.2, 3.6},
            {3.2, 2.2, 1.4, 1.0, 1.4, 3.0, 2.0, 1.0, 0.0, 1.0, 3.2, 2.2, 1.4, 1.0, 1,4, 3.6, 2.8, 2.2, 2.0, 2.2, 4.2, 3.6, 3.2, 3.0, 3.2},
            {4.1, 3.2, 2.2, 1.4, 1.0, 4.0, 3.0, 2.0, 1.0, 0.0, 4.1, 3.2, 2.2, 1.4, 1.0, 4.5, 3.6, 2.8, 2.2, 2.0, 5.0, 4.2, 3.6, 3.2, 3.0},
            {2.0, 2.2, 2.8, 3.6, 4.5, 1.0, 1.4, 2.2, 3.2, 4.1, 0.0, 1.0, 2.0, 3.0, 4.0, 1.0, 1.4, 2.2, 3.2, 4.1, 2.0, 2.2, 2.8, 3.6, 4.5},
            {2.2, 2.0, 2.2, 2.8, 3.6, 1.4, 1.0, 1.4, 2.2, 3.2, 1.0, 0.0, 1.0, 2.0, 3.0, 1.4, 1.0, 1.4, 2.2, 3.2, 2.2, 2.0, 2.2, 2.8, 3.6},
            { 2.8, 2.2, 2.0, 2.2, 2.8, 2.2, 1.4, 1.0, 1.4, 2.2, 2.0, 1.0, 0.0, 1.0, 2.0, 2.2, 1.4, 1.0, 1.4, 2.2, 2.8, 2.2, 2.0, 2.2, 2.8},
            {3.6, 2.8, 2.2, 2.0, 2.2, 3.2, 2.2, 1.4, 1.0, 1.4, 3.0, 2.0, 1.0, 0.0, 1.0, 3.2, 2.2, 1.4, 1.0, 1,4, 3.6, 2.8, 2.2, 2.0, 2.2},
            { 4.5, 3.6, 2.8, 2.2, 2.0, 4.1, 3.2, 2.2, 1.4, 1.0, 4.0, 3.0, 2.0, 1.0, 0.0, 4.1, 3.2, 2.2, 1.4, 1.0, 4.5, 3.6, 2.8, 2.2, 2.0},
            { 3.0, 3.2, 3.6, 4.2, 5.0, 2.0, 2.2, 2.8, 3.6, 4.5, 1.0, 1.4, 2.2, 3.2, 4.1, 0.0, 1.0, 2.0, 3.0, 4.0, 1.0, 1.4, 2.2, 3.2, 4.1},
            { 3.2, 3.0, 3.2, 3.6, 4.2, 2.2, 2.0, 2.2, 2.8, 3.6, 1.4, 1.0, 1.4, 2.2, 3.2, 1.0, 0.0, 1.0, 2.0, 3.0, 1.4, 1.0, 1.4, 2.2, 3.2},
            { 3.6, 3.2, 3.0, 3.2, 3.6, 2.8, 2.2, 2.0, 2.2, 2.8, 2.2, 1.4, 1.0, 1.4, 2.2, 2.0, 1.0, 0.0, 1.0, 2.0, 2.2, 1.4, 1.0, 1.4, 2.2},
            { 4.2, 3.6, 3.2, 3.0, 3.2, 3.6, 2.8, 2.2, 2.0, 2.2, 3.2, 2.2, 1.4, 1.0, 1.4, 3.0, 2.0, 1.0, 0.0, 1.0, 3.2, 2.2, 1.4, 1.0, 1,4},
            { 5.0, 4.2, 3.6, 3.2, 3.0, 4.5, 3.6, 2.8, 2.2, 2.0, 4.1, 3.2, 2.2, 1.4, 1.0, 4.0, 3.0, 2.0, 1.0, 0.0, 4.1, 3.2, 2.2, 1.4, 1.0},
            { 4.0, 4.1, 4.5, 5.0, 5.7, 3.0, 3.2, 3.6, 4.2, 5.0, 2.0, 2.2, 2.8, 3.6, 4.5, 1.0, 1.4, 2.2, 3.2, 4.1, 0.0, 1.0, 2.0, 3.0, 4.0},
            { 4.1, 4.0, 4.1, 4.5, 5.0, 3.2, 3.0, 3.2, 3.6, 4.2, 2.2, 2.0, 2.2, 2.8, 3.6, 1.4, 1.0, 1.4, 2.2, 3.2, 1.0, 0.0, 1.0, 2.0, 3.0},
            { 4.5, 4.1, 4.0, 4.1, 4.5, 3.6, 3.2, 3.0, 3.2, 3.6, 2.8, 2.2, 2.0, 2.2, 2.8, 2.2, 1.4, 1.0, 1.4, 2.2, 2.0, 1.0, 0.0, 1.0, 2.0},
            { 5.0, 4.5, 4.1, 4.0, 4.1, 4.2, 3.6, 3.2, 3.0, 3.2, 3.6, 2.8, 2.2, 2.0, 2.2, 3.2, 2.2, 1.4, 1.0, 1.4, 3.0, 2.0, 1.0, 0.0, 1.0},
            { 5.7, 5.0, 4.5, 4.1, 4.0, 5.0, 4.2, 3.6, 3.2, 3.0, 4.5, 3.6, 2.8, 2.2, 2.0, 4.1, 3.2, 2.2, 1.4, 1.0, 4.0, 3.0, 2.0, 1.0, 0.0}
    };


    public ArrayList<Integer> dijkstra(List<Integer> shelftogo, int src) {

        ArrayList<Integer>result=new ArrayList<>();
        int V=shelftogo.size();
//            Set<Integer> s = new LinkedHashSet<Integer>(shelftogo);
//            int x=s.size();
        ArrayList<Integer> arrlist = new ArrayList<Integer>(V);
        int presentNode=1;
        int srcnode=0;//baskets kept here
        while(V!=0){

            double min=999.0;
            //V=no of items
            for( int i=0;i<V;i++){
                double sourcedist=graph[shelftogo.get(i)-1][presentNode-1];
                if(min>sourcedist){
                    min=sourcedist;
                    srcnode=i;
                }
            }
            arrlist.add(shelftogo.get(srcnode)+1);
            presentNode = shelftogo.get(srcnode);
            shelftogo.remove(srcnode);
            V--;
        }

        for(int j=0;j<arrlist.size();j++){
            result.add(arrlist.get(j));
            //System.out.print(arrlist.get(j)+" ---> ");
        }

        return result;

    }

    // Driver method

}

